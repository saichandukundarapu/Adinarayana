{"version":3,"sources":["AppContext.js","components/Layout/Loader.js","App.js","index.js"],"names":["logoutTimer","AppContext","React","createContext","calculateRemainingTime","expirationTime","currentTime","Date","getTime","ContextProvider","props","initialToken","tokenData","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","removeItem","token","duration","retrieveStoredToken","currentEmail","useState","isLogin","setIsLogin","email","setEmail","setToken","userIsLoggedIn","logoutHandler","useCallback","clearTimeout","useEffect","setTimeout","loading","setLoading","places","setPlaces","searchTerm","setSearchTerm","a","fetch","response","ok","Error","json","key","data","loadedPlaces","push","id","name","info","price","image","fetchPlaces","catch","error","console","log","Provider","value","isLoggedIn","switchAuthModeHandler","text","loginHandler","setItem","emailHandler","children","useAppContext","useContext","Loader","className","AuthPage","lazy","HomePage","ProfilePage","BookingsPage","Presence","App","fallback","path","exact","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.218e5b61.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from 'react';\n\nconst AppContext = React.createContext();\n\nlet logoutTimer;\n\nconst calculateRemainingTime = (expirationTime) => {\n\tconst currentTime = new Date().getTime();\n\tconst adjExpirationTime = new Date(expirationTime).getTime();\n\n\tconst remainingTime = adjExpirationTime - currentTime;\n\treturn remainingTime;\n};\n\nconst retrieveStoredToken = () => {\n\tconst storedToken = localStorage.getItem('token');\n\tconst storedExpirationDate = localStorage.getItem('expirationTime');\n\n\tconst remainingTime = calculateRemainingTime(storedExpirationDate);\n\n\tif (remainingTime <= 60000) {\n\t\tlocalStorage.removeItem('token');\n\t\tlocalStorage.removeItem('email');\n\t\tlocalStorage.removeItem('expirationTime');\n\t\treturn null;\n\t}\n\n\treturn {\n\t\ttoken: storedToken,\n\t\tduration: remainingTime\n\t};\n};\n\nexport const ContextProvider = (props) => {\n\t// Authentication\n\tconst tokenData = retrieveStoredToken();\n\tlet initialToken;\n\tif (tokenData) {\n\t\tinitialToken = tokenData.token;\n\t}\n\t\n\tconst currentEmail = localStorage.getItem('email');\n\n\tconst [isLogin, setIsLogin] = useState(null);\n\tconst [email, setEmail] = useState(currentEmail);\n\tconst [token, setToken] = useState(initialToken);\n\tconst userIsLoggedIn = !!token;\n\n\n\tconst emailHandler = (email) => {\n\t\tsetEmail(email);\n\t\tlocalStorage.setItem('email', email);\n\t};\n\n\tconst logoutHandler = useCallback(() => {\n\t\tsetToken(null);\n\t\tsetEmail(null);\n\n\t\tlocalStorage.removeItem('token');\n\t\tlocalStorage.removeItem('email');\n\t\tlocalStorage.removeItem('expirationTime');\n\n\t\tif (logoutTimer) {\n\t\t\tclearTimeout(logoutTimer);\n\t\t}\n\t}, []);\n\n\tconst loginHandler = (token, expirationTime) => {\n\t\tsetToken(token);\n\n\t\tlocalStorage.setItem('token', token);\n\t\tlocalStorage.setItem('expirationTime', expirationTime);\n\n\t\tconst remainingTime = calculateRemainingTime(expirationTime);\n\n\t\tlogoutTimer = setTimeout(logoutHandler, remainingTime);\n\t};\n\n\n\tuseEffect(() => {\n\t\tif (tokenData) {\n\t\t\tlogoutTimer = setTimeout(logoutHandler, tokenData.duration);\n\t\t}\n\t}, [tokenData, logoutHandler]);\n\n\n\tconst switchAuthModeHandler = (text) => {\n\t\tif (text === 'Log in') {\n\t\t\tsetIsLogin(true);\n\t\t}\n\t\telse {\n\t\t\tsetIsLogin(false);\n\t\t}\n\t};\n\n\t// Displaying places\n\tconst [loading, setLoading] = useState(true);\n\tconst [places, setPlaces] = useState([]);\n\tconst [searchTerm, setSearchTerm] = useState('');\n\n\tuseEffect(() => {\n\t\tconst fetchPlaces = async () => {\n\t\t\tsetLoading(true);\n\t\t\tconst response = await fetch(`https://parklane-24dk-default-rtdb.firebaseio.com/places.json?auth=${token}`);\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Something went wrong!');\n\t\t\t}\n\t\t\t\n\t\t\tconst data = await response.json();\n\t\t\tconst loadedPlaces = [];\n\n\t\t\tfor (const key in data) {\n\t\t\t\tloadedPlaces.push({\n\t\t\t\t\tid: key,\n\t\t\t\t\tname: data[key].name,\n\t\t\t\t\tinfo: data[key].info,\n\t\t\t\t\tprice: data[key].price,\n\t\t\t\t\timage: data[key].image\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetPlaces(loadedPlaces);\n\t\t\tsetLoading(false);\n\t\t};\n\n\t\tfetchPlaces().catch(error => {\n\t\t\tconsole.log(error);\n\t\t\tsetLoading(false);\n\t\t});\n\t}, [token]);\n\n\treturn (\n\t\t<AppContext.Provider value = {{\n\t\t\tisLogin,\n\t\t\ttoken,\n\t\t\temail, \n\t\t\tloading, \n\t\t\tplaces,\n\t\t\tsearchTerm,\n\t\t\tsetSearchTerm,\n\t\t\tisLoggedIn: userIsLoggedIn,\n\t\t\tswitchAuthModeHandler,\n\t\t\tloginHandler,\n\t\t\tlogoutHandler,\n\t\t\temailHandler\n\t\t}}>\n\t\t\t{props.children}\n\t\t</AppContext.Provider>\n\t);\n};\n\nexport const useAppContext = () => {\n\treturn useContext(AppContext);\n};\n\n","import React from 'react';\n\nconst Loader = () => {\n  \n return (\n  <div className = \"centered\">\n    <div className=\"lds-grid\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </div>\n );\n};\n\nexport default Loader;","import React, { Suspense } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport {useAppContext} from './AppContext';\nimport Loader from './components/Layout/Loader';\n\nconst AuthPage = React.lazy(() => import('./pages/AuthPage'));\nconst HomePage = React.lazy(() => import('./pages/HomePage'));\nconst ProfilePage = React.lazy(() => import('./pages/ProfilePage'));\nconst BookingsPage = React.lazy(() => import('./pages/BookingsPage'));\nconst Presence = React.lazy(() => import('./components/StartingPage/Presence'));\n\nfunction App() {\n  const {isLoggedIn} = useAppContext();\n\n  return (\n    <Suspense fallback = {<Loader />}>\n      <Switch>\n        <Route path='/' exact>\n          <HomePage />\n        </Route>\n\n        <Route path='/auth'>\n          {isLoggedIn && <HomePage />}\n          {!isLoggedIn && <AuthPage />}\n        </Route>\n\n        {isLoggedIn && (\n          <Route path='/profile' exact>\n            <Presence />\n          </Route>\n        )}\n\n        {isLoggedIn && (\n          <Route path='/bookings' exact>\n            <BookingsPage />\n          </Route>\n        )}\n\n        {isLoggedIn && (\n          <Route path = '/profile/:placeId'>\n            <ProfilePage />\n          </Route>\n        )}\n\n        <Route path = '*'>\n          <Redirect to = '/' />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport {ContextProvider} from './AppContext';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <ContextProvider>\n      <App />\n    </ContextProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}